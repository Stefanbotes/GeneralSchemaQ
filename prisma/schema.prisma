generator client {
  provider      = "prisma-client-js"
  // Add x64 too (Vercel often runs x64 on Linux-musl + OpenSSL 3):
  binaryTargets = ["native", "linux-musl-x64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

/* ------------------- AUTH MODELS (NextAuth-compatible) ------------------- */

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  firstName             String
  lastName              String
  password              String
  role                  UserRole @default(CLIENT)

  // Important: NextAuth expects DateTime? here (not boolean)
  emailVerified         DateTime?

  // (Optional) keep your boolean too if you need it internally; otherwise remove it.
  // If you keep it, rename to avoid confusion and keep them in sync at app level:
  // isEmailVerified       Boolean  @default(false)

  emailVerifiedAt       DateTime?
  tokenVersion          Int       @default(0)
  loginAttempts         Int       @default(0)
  lockoutUntil          DateTime?
  lastLogin             DateTime?
  passwordChangedAt     DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts              Account[]
  sessions              Session[]
  verificationTokens    VerificationToken[]
  assessments           assessments[]
  password_reset_tokens password_reset_tokens[]
  rate_limit_records    rate_limit_records[]

  @@map("users")
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  tokenVersion Int      @default(0)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  // NextAuth expects these exact columns: identifier, token, expires
  identifier String
  token      String   @unique
  expires    DateTime

  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // If you want a relation to a user, you can add a nullable userId, but
  // the Prisma Adapter doesn't require it.
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/* ------------------- YOUR EXISTING APP MODELS (unchanged) ------------------- */

model assessment_questions {
  id             String   @id
  order          Int      @unique
  domain         String?
  schema         String?
  persona        String?
  healthyPersona String?
  statement      String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model assessments {
  id                String            @id @default(cuid())
  userId            String
  status            AssessmentStatus  @default(NOT_STARTED)
  agreedToTerms     Boolean           @default(false)
  agreedAt          DateTime?
  responses         Json?
  leadershipPersona String?
  results           Json?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  users             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lasbi_responses   lasbi_responses[]
}

model leadership_personas {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  characteristics Json
  strengths       Json
  growthAreas     Json
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// LASBI
model lasbi_items {
  item_id         String   @id
  canonical_id    String   @unique
  variable_id     String
  question_number Int
  schema_label    String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  responses lasbi_responses[]

  @@index([canonical_id])
  @@index([variable_id])
  @@map("lasbi_items")
}

model lasbi_responses {
  response_id     String   @id @default(cuid())
  assessment_id   String
  item_id         String
  canonical_id    String
  variable_id     String
  value           Int
  mapping_version String   @default("1.0.1")
  created_at      DateTime @default(now())

  assessment assessments @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  item       lasbi_items @relation(fields: [item_id], references: [item_id], onDelete: Restrict)

  @@unique([assessment_id, item_id])
  @@index([assessment_id])
  @@index([variable_id])
  @@index([canonical_id])
  @@map("lasbi_responses")
}

model password_reset_tokens {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model rate_limit_records {
  id          String   @id @default(cuid())
  userId      String?
  ipAddress   String?
  action      String
  attempts    Int      @default(1)
  windowStart DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ipAddress, action, windowStart])
  @@unique([userId, action, windowStart])
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum UserRole {
  CLIENT
  COACH
  ADMIN
}

