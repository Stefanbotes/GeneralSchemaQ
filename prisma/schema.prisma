// generator & datasource stay as you already have them

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  password          String
  role              UserRole @default(CLIENT)
  emailVerified     DateTime?
  tokenVersion      Int      @default(0)
  loginAttempts     Int      @default(0)
  lockoutUntil      DateTime?
  lastLogin         DateTime?
  passwordChangedAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  accounts          Account[]
  sessions          Session[]
  assessments       Assessment[]
  passwordResetTokens PasswordResetToken[]
  rateLimitRecords  RateLimitRecord[]
  verificationTokens VerificationToken[]

  @@map("users") // <-- map model User to table "users"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  tokenVersion Int      @default(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  identifier String
  token     String   @unique
  userId    String?
  expires   DateTime
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  userId    String?
  expires   DateTime
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Assessment {
  id                String            @id @default(cuid())
  userId            String
  status            AssessmentStatus  @default(NOT_STARTED)
  agreedToTerms     Boolean           @default(false)
  agreedAt          DateTime?
  responses         Json?
  leadershipPersona String?
  results           Json?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lasbiResponses    LasbiResponse[]

  @@map("assessments")
}

model AssessmentQuestion {
  id             String   @id
  order          Int      @unique
  domain         String?
  schema         String?
  persona        String?
  healthyPersona String?
  statement      String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("assessment_questions")
}

model LeadershipPersona {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  characteristics Json
  strengths       Json
  growthAreas     Json
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("leadership_personas")
}

model LasbiItem {
  item_id         String   @id
  canonical_id    String   @unique
  variable_id     String
  question_number Int
  schema_label    String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  responses       LasbiResponse[]

  @@index([canonical_id])
  @@index([variable_id])
  @@map("lasbi_items")
}

model LasbiResponse {
  response_id     String   @id @default(cuid())
  assessment_id   String
  item_id         String
  canonical_id    String
  variable_id     String
  value           Int
  mapping_version String   @default("1.0.1")
  created_at      DateTime @default(now())

  assessment Assessment @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  item       LasbiItem  @relation(fields: [item_id], references: [item_id], onDelete: Restrict)

  @@unique([assessment_id, item_id], name: "assessment_id_item_id")
  @@index([assessment_id])
  @@index([variable_id])
  @@index([canonical_id])
  @@map("lasbi_responses")
}

model RateLimitRecord {
  id          String   @id @default(cuid())
  userId      String?
  ipAddress   String?
  action      String
  attempts    Int      @default(1)
  windowStart DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ipAddress, action, windowStart])
  @@unique([userId, action, windowStart])
  @@map("rate_limit_records")
}

enum AssessmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum UserRole {
  CLIENT
  COACH
  ADMIN
}
